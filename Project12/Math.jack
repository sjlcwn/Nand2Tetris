// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int iSign;
    /** Initializes the library. */
    function void init() {
        let iSign=16384+16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x>0)
        {
            return x;
        }
        return -x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int iPos,iAdd,iResult;
        var boolean bNeg;
        let bNeg=false;
        if (x&iSign)
        {
            let x=-x;
            let bNeg=true;
        }
        if (y&iSign)
        {
            let y=-y;
            let bNeg=~bNeg;
        }
        
        
        let iResult=0;
        let iPos=1;
        let iAdd=y;
        while (~(iPos=0))
        {
            if (~((iPos&x)=0))
            {
                let iResult=iResult+iAdd;
            }
            let iPos=iPos+iPos;
            let iAdd=iAdd+iAdd;
        }
        let iResult=iResult&(~iSign);
        if (bNeg)
        {
            let iResult=-iResult;
        }

        return iResult;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int iPos,iAdd,iResult;
        var boolean bNeg;
        let iResult=0;
        let bNeg=false;
        if (x&iSign)
        {
            let x=-x;
            let bNeg=true;
        }
        if (y&iSign)
        {
            let y=-y;
            let bNeg=~bNeg;
        }
        while (~(x<y))
        {
            let iPos=1;
            let iAdd=y;
            while ((~(x<(iAdd+iAdd)))&((iAdd&iSign)=0))
            {
                let iPos=iPos+iPos;
                let iAdd=iAdd+iAdd;
            }
            let x=x-iAdd;
            let iResult=iResult+iPos;
        }
        if (bNeg)
        {
            let iResult=-iResult;
        }
        return iResult;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int iResult,iPlus;
        if (x>0)
        {
            let iResult=0;
            while (true)
            {
                let iPlus=1;
                while ((~(iPlus=128))&(((iPlus+iPlus)&iResult)=0)&((iResult+iPlus+iPlus)<182)&(((iResult+iPlus+iPlus)*(iResult+iPlus+iPlus))<x))
                {
                    let iPlus=iPlus+iPlus;
                }
                if ((iPlus=0)|(~((iPlus&iResult)=0)))
                {
                    return iResult;
                }
                let iResult=iResult|iPlus;
            }
            return iResult;
        }
        return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a>b)
        {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a>b)
        {
            return b;
        }
        return a;
    }
}
