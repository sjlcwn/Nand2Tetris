// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean bColor;

    /** Initializes the Screen. */
    function void init() {
        do Screen.clearScreen();
        let bColor=true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var Array mScreen;
        let mScreen=16384;
        while (mScreen<24576)
        {
            let mScreen[0]=0;
            let mScreen=mScreen+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let bColor=b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int iData,iLoop,iColor;
        var Array mScreen;
        if (~((x<0)|(x>511)|(y<0)|(y>255)))
        {
            if (bColor)
            {
                let iColor=-1;
            }
            else
            {
                let iColor=0;
            }
            let iLoop=x/16;
            let mScreen=16384+iLoop+(y*32);
            let iData=1;
            let iLoop=x-(iLoop*16);
            while (~(iLoop=0))
            {
                let iLoop=iLoop-1;
                let iData=iData+iData;
            }
            let mScreen[0]=(mScreen[0]&(~iData))|(iData&iColor);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x,y,dx,dy;
        let x=x1;
        let y=y1;
        if (x1<x2)
        {
            let dx=1;
        }
        else
        {
            let dx=-1;
        }
        if (y1<y2)
        {
            let dy=1;
        }
        else
        {
            let dy=-1;
        }
        if (x=x2)
        {
            while (~(y=y2))
            {
                do Screen.drawPixel(x,y);
                let y=y+dy;
            }
        }
        else
        {
            if (y=y2)
            {
                while (~(x=x2))
                {
                    do Screen.drawPixel(x,y);
                    let x=x+dx;
                }
            }
            else
            {
                while (~((x=x2)&(y=y2)))
                {
                    do Screen.drawPixel(x,y);
                    if (((x2-x)*dx*(y2-y1)*dy)>((y2-y)*dy*(x2-x1)*dx))
                    {
                        let x=x+dx;
                    }
                    else
                    {
                        let y=y+dy;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x,y,dx,dy;
        if (x1<x2)
        {
            let dx=1;
        }
        else
        {
            let dx=-1;
        }
        if (y1<y2)
        {
            let dy=1;
        }
        else
        {
            let dy=-1;
        }
        let x2=x2+dx;
        let y2=y2+dy;
        let x=x1;
        while (~(x=x2))
        {
            let y=y1;
            while (~(y=y2))
            {
                do Screen.drawPixel(x,y);
                let y=y+dy;
            }
            let x=x+dx;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int iXLoop,iYLoop,iYEnd,iY;
        let iXLoop=0;
        while (iXLoop<r)
        {
            let iY=Math.sqrt((r*r)-(iXLoop*iXLoop));
            let iYLoop=y-iY;
            let iYEnd=y+iY+1;
            if ((iYLoop>256)|(iYLoop<0))
            {
                let iYLoop=0;
            }
            if ((iYEnd>256)|(iYEnd<0))
            {
                let iYEnd=256;
            }
            while (iYLoop<iYEnd)
            {
                do Screen.drawPixel(x+iXLoop,iYLoop);
                do Screen.drawPixel(x-iXLoop,iYLoop);
                let iYLoop=iYLoop+1;
            }
            let iXLoop=iXLoop+1;
        }
        return;
    }
}
