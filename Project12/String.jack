// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array mData;
    field int iLength;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let mData=Array.new(maxLength+1);
        let iLength=maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (mData)
        {
            do mData.dispose();
            let mData=0;
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        var int iResult;
        let iResult=0;
        while ((iResult<iLength)&(~(mData[iResult]=0)))
        {
            let iResult=iResult+1;
        }
        return iResult;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j<iLength)
        {
            return mData[j];
        }
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j<iLength)
        {
            if (~(j<length()))
            {
                let mData[j+1]=0;
            }
            let mData[j]=c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int iCurrentLength;
        let iCurrentLength=length();
        if (iCurrentLength<iLength)
        {
            let mData[iCurrentLength]=c;
            let mData[iCurrentLength+1]=0;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        var int iCurrentLength;
        let iCurrentLength=length();
        if (~(iCurrentLength=0))
        {
            let mData[iCurrentLength-1]=0;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int iCurrentLength,iLoop,iResult;
        var boolean bNeg;
        let iCurrentLength=length();
        let iResult=0;
        if (charAt(0)=45)
        {
            let bNeg=true;
            let iLoop=1;
        }
        else
        {
            let bNeg=false;
            let iLoop=0;
        }
        while ((iLoop<iCurrentLength)&(mData[iLoop]>47)&(mData[iLoop]<58))
        {
            let iResult=(iResult*10)+mData[iLoop]-48;
            let iLoop=iLoop+1;
        }
        if (bNeg)
        {
            let iResult=-iResult;
        }
        return iResult;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int iCursor,iCurrent;
        var boolean bNeg;
        let iCursor=1;
        let mData[0]=0;
        if (val<0)
        {
            let iLength=2;
            let bNeg=true;
            let val=-val;
        }
        else
        {
            let iLength=1;
            let bNeg=false;
        }
        while ((iCursor<10000)&(~(iCursor*10>val)))
        {
            let iCursor=iCursor*10;
            let iLength=iLength+1;
        }
        do dispose();
        let mData=Array.new(iLength+1);
        let mData[0]=0;
        if (bNeg)
        {
            do appendChar(45);
        }
        while (~(iCursor=0))
        {
            let iCurrent=val/iCursor;
            let val=val-(iCurrent*iCursor);
            do appendChar(iCurrent+48);
            let iCursor=iCursor/10;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
